{"version":3,"sources":["webpack:///./src/app/views/login/confirmation/confirmation.component.html","webpack:///./src/app/views/login/confirmation/confirmation.component.ts","webpack:///./src/app/views/login/forgot/forgot.component.html","webpack:///./src/app/views/login/forgot/forgot.component.ts","webpack:///./src/app/views/login/login.module.ts","webpack:///./src/app/views/login/login.routing.ts","webpack:///./src/app/views/login/login.service.ts","webpack:///./src/app/views/login/login/login.component.html","webpack:///./src/app/views/login/login/login.component.ts","webpack:///./src/app/views/login/register/register.component.html","webpack:///./src/app/views/login/register/register.component.ts"],"names":[],"mappings":"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","file":"views-login-login-module.js","sourcesContent":["module.exports = \"<ab-panel *ngIf=\\\"schemas\\\"\\r\\n          [schema]=\\\"schemas\\\">\\r\\n  <panel-body>\\r\\n    <ab-form [formSchema]=\\\"schemas.form\\\"\\r\\n             (send)=\\\"onSend($event)\\\">\\r\\n    </ab-form>\\r\\n  </panel-body>\\r\\n</ab-panel>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { IWidgetSchema, IFormSchema } from 'app/tools/schema.model';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SchemaService } from 'app/tools/components/schema.service';\r\nimport { SecurityService, IInvitationCredential } from 'app/tools/security.service';\r\nimport { BusService } from 'app/tools/bus.service';\r\nimport { Level } from 'app/tools/message.model';\r\nimport { LoginService } from 'app/views/login/login.service';\r\n\r\n@Component({\r\n  selector: 'ab-confirmation',\r\n  templateUrl: './confirmation.component.html',\r\n  styles: []\r\n})\r\nexport class ConfirmationComponent implements OnInit {\r\n\r\n  public schemas;\r\n  public userId: string;\r\n  public user;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private login: LoginService,\r\n    private bus: BusService,\r\n    private schema: SchemaService,\r\n    private securityService: SecurityService) { }\r\n\r\n  ngOnInit() {\r\n    this.route.params\r\n      .subscribe(params => {\r\n        this.userId = params['user_id'];\r\n        this.login.getUserById(this.userId).subscribe(user => {\r\n          this.schema\r\n            .getSchema$('me_confirmation')\r\n            .subscribe(schemas => {\r\n              this.schemas = schemas\r\n              this.user = user;\r\n              this.schemas.header.title = `Hola ${this.user.name}! ` + this.schemas.header.title;\r\n            });\r\n        });\r\n      });\r\n  }\r\n\r\n  onSend(credentials: IInvitationCredential) {\r\n    if (credentials.password === credentials.passwordBis) {\r\n      credentials._id = this.userId;\r\n      this.securityService.confirmInvitation(credentials);\r\n    } else {\r\n      this.bus.emit({ level: Level.WARNING, code: 'passwordbis' });\r\n    }\r\n  }\r\n\r\n}\r\n","module.exports = \"<ab-panel *ngIf=\\\"schemas\\\"\\r\\n          [schema]=\\\"schemas\\\">\\r\\n  <panel-body>\\r\\n    <ab-form [formSchema]=\\\"schemas.form\\\"\\r\\n             (send)=\\\"onSend($event)\\\">\\r\\n    </ab-form>\\r\\n  </panel-body>\\r\\n</ab-panel>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { SchemaService } from 'app/tools/components/schema.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { LoginService } from 'app/views/login/login.service';\r\nimport { BusService } from 'app/tools/bus.service';\r\nimport { Level } from 'app/tools/message.model';\r\n\r\n@Component({\r\n  selector: 'ab-forgot',\r\n  templateUrl: './forgot.component.html',\r\n  styles: []\r\n})\r\nexport class ForgotComponent implements OnInit {\r\n  public schemas;\r\n  private userId;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private bus: BusService,\r\n    private loginService: LoginService,\r\n    private schema: SchemaService) { }\r\n\r\n  ngOnInit() {\r\n    this.schema\r\n      .getSchema$('forgot_password')\r\n      .subscribe(schemas => this.schemas = schemas);\r\n  }\r\n\r\n  onSend(email) {\r\n    this.loginService.restorePassword(email).subscribe(() => {\r\n      this.bus.emit({ level: Level.SUCCESS, text: 'Recibir√°s un correo cos pasos necesarios para cambiar o teu contrasinal', code: '' });\r\n    });\r\n    this.router.navigateByUrl('/');\r\n  }\r\n}\r\n","import { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginRoutingModule } from './login.routing';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ComponentsModule } from 'app/tools/components/components.module';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { ForgotComponent } from './forgot/forgot.component';\r\nimport { ConfirmationComponent } from 'app/views/login/confirmation/confirmation.component';\r\nimport { LoginService } from 'app/views/login/login.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    ComponentsModule\r\n  ],\r\n  declarations: [LoginComponent, ConfirmationComponent, RegisterComponent, ForgotComponent],\r\n  providers: [LoginService],\r\n  schemas: [NO_ERRORS_SCHEMA]\r\n})\r\nexport class LoginModule { }\r\n","import { NgModule, Injectable } from '@angular/core';\r\nimport { Routes, RouterModule, Resolve, Router, ActivatedRoute } from '@angular/router';\r\nimport { LoginComponent } from 'app/views/login/login/login.component';\r\nimport { RegisterComponent } from 'app/views/login/register/register.component';\r\nimport { ForgotComponent } from 'app/views/login/forgot/forgot.component';\r\nimport { ConfirmationComponent } from 'app/views/login/confirmation/confirmation.component';\r\n\r\n\r\nconst routes: Routes = [{\r\n  path: '',\r\n  component: LoginComponent,\r\n  data: { name: 'login', title: 'Entrada' }\r\n},\r\n{\r\n  path: 'confirm/:user_id',\r\n  component: ConfirmationComponent,\r\n  data: { name: 'me_confirmation', title: 'Confirmaci√≥n de conta' }\r\n},\r\n{\r\n  path: 'forgot-password',\r\n  component: ForgotComponent,\r\n  data: { name: 'forgot', title: 'Recuperar contrasinal' }\r\n},\r\n{\r\n  path: 'register',\r\n  component: RegisterComponent,\r\n  data: { name: 'register', title: 'Rexistro' }\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class LoginService {\r\n\r\n  private credentialsUrl = 'credentials';\r\n  private usersUrl = 'home/users';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getUserById(userId) {\r\n    return this.http.get(`${this.usersUrl}/${userId}`);\r\n  }\r\n\r\n  restorePassword(email) {\r\n    return this.http.post(`${this.credentialsUrl}/forgot-password`, email);\r\n  }\r\n\r\n}\r\n","module.exports = \"<ab-panel *ngIf=\\\"schemas\\\"\\r\\n          [schema]=\\\"schemas\\\">\\r\\n  <panel-body>\\r\\n    <ab-form [formSchema]=\\\"schemas.form\\\"\\r\\n             (send)=\\\"onSend($event)\\\">\\r\\n    </ab-form>\\r\\n  </panel-body>\\r\\n</ab-panel>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { IFormSchema, IWidgetSchema } from 'app/tools/schema.model';\r\nimport { SecurityService, IUserCredential } from 'app/tools/security.service';\r\nimport { environment } from './../../../../environments/environment';\r\nimport { SchemaService } from 'app/tools/components/schema.service';\r\nimport { Observable } from 'rxjs';\r\nimport { ActivatedRoute } from '@angular/router';\r\n@Component({\r\n  selector: 'ab-login',\r\n  templateUrl: './login.component.html',\r\n  styles: []\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public schemas;\r\n\r\n  constructor(\r\n    private security: SecurityService,\r\n    private schema: SchemaService,\r\n    private activatedRoute: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this.schema\r\n      .getSchema$('login')\r\n      .subscribe(schemas => this.schemas = schemas);\r\n  }\r\n\r\n  onSend(credentials: IUserCredential) {\r\n    this.security\r\n      .logInUser(credentials);\r\n  }\r\n\r\n}\r\n\r\n\r\n","module.exports = \"<ab-panel *ngIf=\\\"schemas\\\"\\r\\n          [schema]=\\\"schemas\\\">\\r\\n  <panel-body>\\r\\n    <ab-form [formSchema]=\\\"schemas.form\\\"\\r\\n             (send)=\\\"onSend($event)\\\">\\r\\n    </ab-form>\\r\\n  </panel-body>\\r\\n</ab-panel>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { SecurityService } from 'app/tools/security.service';\r\nimport { BusService } from 'app/tools/bus.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { IFormSchema } from 'app/tools/schema.model';\r\nimport { SchemaService } from 'app/tools/components/schema.service';\r\nimport { IUser } from 'app/tools/user.model';\r\n\r\n@Component({\r\n  selector: 'ab-register',\r\n  templateUrl: './register.component.html',\r\n  styles: []\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  public schemas;\r\n  public user;\r\n\r\n  constructor(\r\n    private security: SecurityService,\r\n    private bus: BusService,\r\n    private schema: SchemaService,\r\n    private activatedRoute: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this.schema\r\n      .getSchema$('register')\r\n      .subscribe(schemas => this.schemas = schemas);\r\n  }\r\n\r\n  onSend(credentials) {\r\n    this.security\r\n      .logInUser(credentials);\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""}